generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  modules   RoleModule[]
  users     User[]
}

model Module {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  roles       RoleModule[]
}

model RoleModule {
  id       Int    @id @default(autoincrement())
  roleId   Int
  moduleId Int
  status   Int    @default(0)
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  role     Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, moduleId])
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  roleId       Int
  Bio          String?
  firstname    String?
  lastname     String?
  address      String?
  country      String?
  phone        String?
  postalcode   String?
  state        String?
  
  activityLogs ActivityLog[]
  role         Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model ActivityLog {
  id          Int      @id @default(autoincrement())
  userId      Int?
  action      String
  description String?
  entityType  String?
  entityId    Int?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailTemplate {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  subject   String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  image_url  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  tagId      String?
  tagurl     String?
  titleurl   String?
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model SeoPages {
  id            Int      @id @default(autoincrement())
  title         String
  slug          String   @unique
  content       String
  meta_title    String?
  meta_desc     String?
  meta_keywords String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  seopage       String?
}



model Notification {
  id        Int      @id @default(autoincrement())  // Existing numeric ID
  userId    Int?                                      
  message   String   @db.VarChar(500)                
  isRead    Boolean  @default(false)                
  type      String?  @db.VarChar(50)                
  createdAt DateTime @default(now())                
  updatedAt DateTime @updatedAt                     

  uuid      String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid 

  @@index([userId])
}




model Subscription {
  id                    Int       @id @default(autoincrement())
  userId                Int?
  stripeCustomerId      String
  stripeSubscriptionId  String
  status                String
  currentPeriodEnd      DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
}



model Specialty {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(100)   
  typeId      Int                                   
  type        SpecialtyType @relation(fields: [typeId], references: [id])
  status      Int           @default(1)       
  description String?      @db.VarChar(500)    
  uuid      String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid 
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model SpecialtyType {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(50)    
  specialties Specialty[]                           
  uuid      String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid 
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}



model Category {
  id                 Int        @id @default(autoincrement())
  name               String     @db.VarChar(150)
  slug               String     @unique @db.VarChar(150)
  parent_category_id Int?       
  parent             Category?  @relation("CategoryHierarchy", fields: [parent_category_id], references: [id], onDelete: Cascade)
  children           Category[] @relation("CategoryHierarchy")
  level              Int        @default(1)
  description        String?    
  icon               String?    @db.VarChar(100)
  sort_order         Int        @default(0)
  status             String     @default("active") @db.VarChar(20)
  is_featured        Boolean    @default(false)
  full_path          String?    @db.VarChar(500)
  path_ids           String?    @db.VarChar(255)
  created_by         Int?
  updated_by         Int?
  created_at         DateTime   @default(now())
  updated_at         DateTime?

  @@index([slug])
  @@index([parent_category_id])
}
